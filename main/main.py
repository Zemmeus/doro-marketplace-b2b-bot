from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import Message, MediaGroup
from aiogram.types import InputMediaDocument
from aiogram.types import InputFile
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher.filters import Command
import os
import pygsheets
import asyncio

bot = Bot(token='6837625523:AAFoFYkVzE0HkOZCaSzM_BhZxRttUt1jm6I')#test   6508551273:AAFAUNHu2Jb2Ip69TYFBtUDOhCHvLvlnJ3Y     original 6837625523:AAFoFYkVzE0HkOZCaSzM_BhZxRttUt1jm6I
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

CONSTANT_USER_ID = 6416219442

current_directory = os.path.dirname(os.path.abspath(__file__))
path = os.path.join(current_directory, 'studious-rhythm-390907-df0cd6e3852a.json')
gc = pygsheets.authorize(service_account_file=path)
print(gc.spreadsheet_titles())
sh = gc.open('b2b')
wks_company = sh[0]


def find_last_row_with_id(sheet, user_id):
    matching_cells = sheet.find(str(user_id), searchByRegex=False, matchEntireCell=True, includeFormulas=False, matchCase=True, forceFetch=True)
    if not matching_cells:
        return None
    return max(cell.row for cell in matching_cells)

def split_list(lst, n):
        for i in range(0, len(lst), n):
            yield lst[i:i + n]


keyboard1 = InlineKeyboardMarkup(row_width=1)
button_company = InlineKeyboardButton("–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω", callback_data='–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω')
button_self = InlineKeyboardButton("–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω", callback_data='–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω')
keyboard1.add(button_company, button_self)

keyboard_4 = InlineKeyboardMarkup(row_width=1)
button_zakaz = InlineKeyboardButton("–•–æ—á—É –≤—ã–±—Ä–∞—Ç—å", callback_data='zakaz')
button_eche = InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â—ë", callback_data='eche')
keyboard_4.add(button_zakaz, button_eche)

keyboard = InlineKeyboardMarkup(row_width=3)
button_5000 = InlineKeyboardButton("<5000", callback_data="budget_<5000")
button_500010000 = InlineKeyboardButton("5000-10000", callback_data="budget_5000-10000")
button_10000 = InlineKeyboardButton(">10000", callback_data="budget_>10000")
keyboard.add(button_5000,button_500010000,button_10000)



######–∫–ª–∞–≤—ã —Ç–æ–≤–∞—Ä–æ–≤
keyboard_genre = InlineKeyboardMarkup(row_width=3)
button_selfimporve = InlineKeyboardButton("–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ", callback_data="–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ")
keyboard_genre.add(button_selfimporve)

keyboard_aromat = InlineKeyboardMarkup(row_width=3)
button_aromatcitrus = InlineKeyboardButton("–¶–∏—Ç—Ä—É—Å", callback_data="–¶–∏—Ç—Ä—É—Å")
button_aromatflower = InlineKeyboardButton("–¶–≤–µ—Ç–æ—á–Ω—ã–π", callback_data="–¶–≤–µ—Ç–æ—á–Ω—ã–π")
button_aromatcoconut = InlineKeyboardButton("–ö–æ–∫–æ—Å", callback_data="–ö–æ–∫–æ—Å")
button_aromatcofe = InlineKeyboardButton("–ö–æ—Ñ–µ–π–Ω—ã–π", callback_data="–ö–æ—Ñ–µ–π–Ω—ã–π")
keyboard_aromat.add(button_aromatcitrus,button_aromatflower,button_aromatcoconut,button_aromatcofe)

keyboard_chocolate = InlineKeyboardMarkup(row_width=3)
button_chocolategorki = InlineKeyboardButton("–ì–æ—Ä—å–∫–∏–π", callback_data="–ì–æ—Ä—å–∫–∏–π")
button_chocolateblack = InlineKeyboardButton("–¢—ë–º–Ω—ã–π", callback_data="–¢—ë–º–Ω—ã–π")
button_chocolatemilk = InlineKeyboardButton("–ú–æ–ª–æ—á–Ω—ã–π", callback_data="–ú–æ–ª–æ—á–Ω—ã–π")
button_chocolatewhite = InlineKeyboardButton("–ë–µ–ª—ã–π", callback_data="–ë–µ–ª—ã–π")
keyboard_chocolate.add(button_chocolategorki,button_chocolateblack,button_chocolatemilk,button_chocolatewhite)

keyboard_colorpizhama = InlineKeyboardMarkup(row_width=3)
button_colorpink = InlineKeyboardButton("–†–æ–∑–æ–≤—ã–π", callback_data="–ë–µ–ª—ã–π")
button_colorblue = InlineKeyboardButton("–°–∏–Ω–∏–π", callback_data="–°–∏–Ω–∏–π")
button_colorblack = InlineKeyboardButton("–ß—ë—Ä–Ω—ã–π", callback_data="–ß—ë—Ä–Ω—ã–π")
button_colorfuks = InlineKeyboardButton("–§—É–∫—Å–∏—è", callback_data="–§—É–∫—Å–∏—è")
keyboard_colorpizhama.add(button_colorpink,button_colorblue,button_colorblack,button_colorfuks)

keyboard_sizepizhama = InlineKeyboardMarkup(row_width=3)
button_sizeS = InlineKeyboardButton("S", callback_data="S")
button_sizeM = InlineKeyboardButton("M", callback_data="M")
button_sizeL = InlineKeyboardButton("L", callback_data="L")
button_sizeXL = InlineKeyboardButton("XL", callback_data="XL")
keyboard_sizepizhama.add(button_sizeS,button_sizeM,button_sizeL,button_sizeXL)


keyboard3 = InlineKeyboardMarkup(row_width=3)
button_skidki = InlineKeyboardButton("–ö–Ω–∏–≥–∏", callback_data='–ö–Ω–∏–≥–∏')
button_soap = InlineKeyboardButton("–ú—ã–ª–æ", callback_data='–ú—ã–ª–æ')
button_bele = InlineKeyboardButton("–ü–∏–∂–∞–º—ã", callback_data='–ë–µ–ª—å–µ')
button_chocolate = InlineKeyboardButton("–®–æ–∫–æ–ª–∞–¥", callback_data='–®–æ–∫–æ–ª–∞–¥')
button_beauty = InlineKeyboardButton("–£–∫—Ä–∞—à–µ–Ω–∏—è", callback_data='–£–∫—Ä–∞—à–µ–Ω–∏—è')
button_flower = InlineKeyboardButton("–¶–≤–µ—Ç—ã", callback_data='–¶–≤–µ—Ç—ã')
keyboard3.add(button_skidki, button_soap, button_bele,button_chocolate,button_beauty,button_flower)
######–∫–ª–∞–≤—ã —Ç–æ–≤–∞—Ä–æ–≤



class Form(StatesGroup):
    company_name = State()
    company_name_1 = State()
    company_name_2 = State()
    self_name = State()
    inline1 = State()
    inline = State()
    inline2 = State()
    book_company = State()
    soap_company = State()
    belbe_company = State()
    belbe1_company = State()
    jewelery_company = State()
    flowers_company = State()
    chocolate_company = State()
    zakaz = State()
    zakaz1 = State()
    sam_podarok = State()
    sam_podarok1 = State()
    asd = State()

product_photos_company = {
    '–ö–Ω–∏–≥–∏': {
        'budget_<5000': ['11.png', '13.png', '14.png', '15.png', '16.png', '18.png', '19.png', '21.png', '22.png','23.png','24.png','27.png','28.png','29.png','31.png','32.png','33.png','35.png','36.png'],
        'budget_5000-10000': ['12.png', '17.png', '20.png','25.png','26.png','30.png','34.png',],
        'budget_>10000': '–Ω–µ—Ç—É',
    },
    '–ú—ã–ª–æ': {
        'budget_<5000': '–Ω–µ—Ç—É',
        'budget_5000-10000': ['2.png','3.png','1.png'],
        'budget_>10000': '–Ω–µ—Ç—É',
    },
    '–ü–∏–∂–∞–º—ã': {
        'budget_<5000': '–Ω–µ—Ç—É',
        'budget_5000-10000': '–Ω–µ—Ç—É',
        'budget_>10000': ['37.png','38.png'],
    },
    '–®–æ–∫–æ–ª–∞–¥': {
        'budget_<5000': ['7.png','8.png','9.png'],
        'budget_5000-10000': '–Ω–µ—Ç—É',
        'budget_>10000': '–Ω–µ—Ç—É',
    },
    '–£–∫—Ä–∞—à–µ–Ω–∏—è': {
        'budget_<5000': ['10.png'],
        'budget_5000-10000': ['10.png'],
        'budget_>10000': ['10.png'],
    },
    '–¶–≤–µ—Ç—ã': {
        'budget_<5000': '–Ω–µ—Ç—É',
        'budget_5000-10000': ['6.png'],
        'budget_>10000': ['4.png','5.png'],
    }
    
}

product_photos_company = {
    '–ö–Ω–∏–≥–∏': ['11.png', '13.png', '14.png', '15.png', '16.png', '18.png', '19.png', '21.png', '22.png','23.png','24.png','27.png','28.png','29.png','31.png','32.png','33.png','35.png','36.png','12.png', '17.png', '20.png','25.png','26.png','30.png','34.png'],
    '–ú—ã–ª–æ': ['2.png','1.png'],
    '–ü–∏–∂–∞–º—ã': ['37.png','38.png'],
    '–®–æ–∫–æ–ª–∞–¥': ['7.png','8.png','9.png'],
    '–£–∫—Ä–∞—à–µ–Ω–∏—è': ['10.png'],
    '–¶–≤–µ—Ç—ã': ['4.png','5.png',"6.png"]
}

# product_photos_company = {
#     '–ö–Ω–∏–≥–∏': ['11.png', '13.png', '14.png', '15.png', '16.png', '18.png', '19.png', '21.png', '22.png','23.png','24.png','27.png','28.png','29.png','31.png','32.png','33.png','35.png','36.png','12.png', '17.png', '20.png','25.png','26.png','30.png','34.png'],
#     '–ú—ã–ª–æ': ['2.png','1.png'],
#     '–ü–∏–∂–∞–º—ã': ['37.png','38.png'],
#     '–®–æ–∫–æ–ª–∞–¥': ['7.png','8.png','9.png'],
#     '–£–∫—Ä–∞—à–µ–Ω–∏—è': ['10.png'],
#     '–¶–≤–µ—Ç—ã': ['4.png','5.png',"6.png"]
# }

data = {
    "ID": ".",
    "UserName": ".",
    "country": ".",
    "company_name": ".",
    "name": ".",
    "aromat": ".",
    "size": ".",
    "color": ".",
    "vid": ".",
    "chocolate_type" : ".",
    "number_gift": "."
}

@dp.message_handler(commands=['start'], state="*")
async def start(message: types.Message, state: FSMContext):
    await state.set_state(None)

    async with state.proxy() as data:
        data["ID"] = message.from_user.id
        data["UserName"] = message.from_user.full_name
        data["country"] = "."
        data["company_name"] = "."
        data["name"] = "."
        data["genre"] = "."
        data["aromat"] = "."
        data["size"] = "."
        data["color"] = "."
        data["vid"] = "."
        data["chocolate_type"] = "."
        data["number_gift"] = "."

        await message.answer("""–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Doro Eco MarketplaceüéÅüéà - –í–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –≤—ã–±–æ—Ä–µ –∏–¥–µ–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º!""", reply_markup=keyboard1)

        # row = [data]
        # wks_company.append_table(row)
        x = [[i for i in data.values()]]
        wks_company.append_table(x, start='A2', end=None,   
                            dimension='ROWS', overwrite=False)



@dp.callback_query_handler(lambda callback_query: callback_query.data in ['–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω', '–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω'])
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        # if callback_query.data == 'from_company':
        #     data['ch']="from_company"
        #     await Form.company_name_1.set()
        #     await bot.answer_callback_query(callback_query.id)
        #     await bot.send_message(callback_query.from_user.id,f"–û—Ç–ª–∏—á–Ω–æüéâ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:")
        #     print(data , "2")
        # else:
        data["country"]=callback_query.data
        await Form.sam_podarok.set()
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(callback_query.from_user.id, f"–ë–ª–∞–≥–æ–¥–∞—Ä—é‚ù§Ô∏è –£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:")
        row_number_person = find_last_row_with_id(wks_company, data["ID"])
        if row_number_person:
            wks_company.update_value((row_number_person, 3), data['country'])

@dp.message_handler(state=Form.sam_podarok)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['company_name'] = message.text
        await Form.company_name_2.set()
        await message.answer(f"""–ë–ª–∞–≥–æ–¥–∞—Ä—é‚ù§Ô∏è –£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ (–§.–ò.–û.)""")
        row_number_person = find_last_row_with_id(wks_company, data["ID"])
        if row_number_person:
            wks_company.update_value((row_number_person, 4), data['company_name'])

@dp.message_handler(state=Form.company_name_2)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
        await message.answer(f"–ö–∞–∫–æ–π –ø–æ–¥–∞—Ä–æ–∫ –í—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–ª—É—á–∏—Ç—å?",reply_markup=keyboard3)
        row_number_company = find_last_row_with_id(wks_company, data["ID"])
        if row_number_company:
            wks_company.update_value((row_number_company, 5), data['name'])
        await Form.inline1.set()



# @dp.message_handler(state=Form.company_name_1)
# async def process_name(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         print(data,"3")
#         data['company'] = message.text
#         await message.answer(f"–ë–ª–∞–≥–æ–¥–∞—Ä—é‚ù§Ô∏è –£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ (–§.–ò.–û.)")
#         row_number_company = find_last_row_with_id(wks_company, data["ID"])
#         if row_number_company:
#             wks_company.update_value((row_number_company, 3), data['company'])
#         await Form.company_name_2.set()

# @dp.message_handler(state=Form.company_name_2)
# async def process_name(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['name'] = message.text
#         await message.answer(f"–ö–∞–∫–æ–π –ø–æ–¥–∞—Ä–æ–∫ –í—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–ª—É—á–∏—Ç—å?",reply_markup=keyboard3)
#         row_number_company = find_last_row_with_id(wks_company, data["ID"])
#         if row_number_company:
#             wks_company.update_value((row_number_company, 4), data['name'])
#         await Form.inline1.set()


#–ö–ù–ò–ì–ò –ö–û–ú–ü–ê–ù–ò–ò
@dp.callback_query_handler(lambda callback_query: callback_query.data in ['–ö–Ω–∏–≥–∏'], state=Form.inline1)
async def handle_product_selection(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        await bot.send_message(callback_query.from_user.id, f"–ë–ª–∞–≥–æ–¥–∞—Ä—é‚ù§Ô∏è –£–∫–∞–∂–∏—Ç–µ –∂–∞–Ω—Ä, –∫–æ—Ç–æ—Ä—ã–π –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç‚Ä¶",reply_markup=keyboard_genre)
        await Form.book_company.set()

@dp.callback_query_handler(lambda callback_query: callback_query.data in ['–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ'], state=Form.book_company)
async def handle_product_selection(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['genre'] = callback_query.data
        await Form.asd.set()
        print(data)
        await bot.send_message(callback_query.from_user.id,f"–ë–ª–∞–≥–æ–¥–∞—Ä—é, {data['name']}‚ù§Ô∏è –í–∑–≥–ª—è–Ω–∏—Ç–µ –Ω–∞ –º–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        file_name = product_photos_company['–ö–Ω–∏–≥–∏']
        photo_groups = list(split_list(file_name, 10))
        for group in photo_groups:
            media = types.MediaGroup()
            for photo_url in group:
                photo = open(photo_url, 'rb')
                media.attach_photo(photo) 
            await bot.send_media_group(callback_query.from_user.id, media=media)  
        await bot.send_message(callback_query.from_user.id,f"–•–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â–µ?",reply_markup=keyboard_4)
        row_number_person = find_last_row_with_id(wks_company, data["ID"])
        if row_number_person:
            wks_company.update_value((row_number_person, 6), data['genre'])


#–ú–´–õ–û –ö–û–ú–ü–ê–ù–ò–ò
@dp.callback_query_handler(lambda callback_query: callback_query.data in ['–ú—ã–ª–æ'], state=Form.inline1)
async def handle_product_selection(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        await bot.send_message(callback_query.from_user.id, f"–ë–ª–∞–≥–æ–¥–∞—Ä—é‚ù§Ô∏è –£–∫–∞–∂–∏—Ç–µ –∞—Ä–æ–º–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –í–∞–º –ø–æ –¥—É—à–µ‚Ä¶",reply_markup=keyboard_aromat)
        await Form.soap_company.set()

@dp.callback_query_handler(lambda callback_query: callback_query.data in ['–¶–≤–µ—Ç–æ—á–Ω—ã–π','–ö–æ—Ñ–µ–π–Ω—ã–π','–¶–∏—Ç—Ä—É—Å','–ö–æ–∫–æ—Å'], state=Form.soap_company)
async def handle_product_selection(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['aromat'] = callback_query.data
        await Form.asd.set()
        await bot.send_message(callback_query.from_user.id,f"–ë–ª–∞–≥–æ–¥–∞—Ä—é, {data['name']}‚ù§Ô∏è –í–∑–≥–ª—è–Ω–∏—Ç–µ –Ω–∞ –º–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        file_name = product_photos_company['–ú—ã–ª–æ']
        photo_groups = list(split_list(file_name, 10))
        for group in photo_groups:
            media = types.MediaGroup()
            for photo_url in group:
                photo = open(photo_url, 'rb')
                media.attach_photo(photo) 
            await bot.send_media_group(callback_query.from_user.id, media=media)  
        await bot.send_message(callback_query.from_user.id,f"–•–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â–µ?",reply_markup=keyboard_4)
        row_number_person = find_last_row_with_id(wks_company, data["ID"])
        if row_number_person:
            wks_company.update_value((row_number_person, 7), data['aromat'])  


#–ë–ï–õ–¨–ï –ö–û–ú–ü–ê–ù–ò–ò
@dp.callback_query_handler(lambda callback_query: callback_query.data in ['–ë–µ–ª—å–µ'], state=Form.inline1)
async def handle_product_selection(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        await bot.send_message(callback_query.from_user.id, f"–ë–ª–∞–≥–æ–¥–∞—Ä—é‚ù§Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–∏–∂–∞–º—ã, –∫–æ—Ç–æ—Ä—ã–π –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç‚Ä¶",reply_markup=keyboard_sizepizhama)
        await Form.belbe_company.set()


@dp.callback_query_handler(lambda callback_query: callback_query.data in ['S','M','L','XL'], state=Form.belbe_company)
async def handle_product_selection(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data["size"]=callback_query.data
        await bot.send_message(callback_query.from_user.id,f"–ë–ª–∞–≥–æ–¥–∞—Ä—é‚ù§Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ü–≤–µ—Ç –ø–∏–∂–∞–º—ã, –∫–æ—Ç–æ—Ä—ã–π –í—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ‚Ä¶",reply_markup=keyboard_colorpizhama)
        await Form.belbe1_company.set()
        row_number_person = find_last_row_with_id(wks_company, data["ID"])
        if row_number_person:
            wks_company.update_value((row_number_person, 8), data['size'])


@dp.callback_query_handler(lambda callback_query: callback_query.data in ['–ß—ë—Ä–Ω—ã–π','–°–∏–Ω–∏–π','–ë–µ–ª—ã–π','–§—É–∫—Å–∏—è'], state=Form.belbe1_company)
async def handle_product_selection(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['color'] = callback_query.data
        await Form.asd.set()
        await bot.send_message(callback_query.from_user.id,f"–ë–ª–∞–≥–æ–¥–∞—Ä—é, {data['name']}‚ù§Ô∏è –í–∑–≥–ª—è–Ω–∏—Ç–µ –Ω–∞ –º–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        file_name = product_photos_company['–ü–∏–∂–∞–º—ã']
        photo_groups = list(split_list(file_name, 10))
        for group in photo_groups:
            media = types.MediaGroup()
            for photo_url in group:
                photo = open(photo_url, 'rb')
                media.attach_photo(photo) 
            await bot.send_media_group(callback_query.from_user.id, media=media)  
        await bot.send_message(callback_query.from_user.id,f"–•–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â–µ?",reply_markup=keyboard_4)
        row_number_person = find_last_row_with_id(wks_company, data["ID"])
        if row_number_person:
            wks_company.update_value((row_number_person, 9), data['color'])

#–®–û–ö–û–õ–ê–î –ö–û–ú–ü–ê–ù–ò–ò
@dp.callback_query_handler(lambda callback_query: callback_query.data in ['–®–æ–∫–æ–ª–∞–¥'], state=Form.inline1)
async def handle_product_selection(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        await bot.send_message(callback_query.from_user.id, f"–ë–ª–∞–≥–æ–¥–∞—Ä—é‚ù§Ô∏è –£–∫–∞–∂–∏—Ç–µ –≤–∏–¥ —à–æ–∫–æ–ª–∞–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç‚Ä¶",reply_markup=keyboard_chocolate)
        await Form.chocolate_company.set()


@dp.callback_query_handler(lambda callback_query: callback_query.data in ['–ì–æ—Ä—å–∫–∏–π','–ë–µ–ª—ã–π','–ú–æ–ª–æ—á–Ω—ã–π','–¢—ë–º–Ω—ã–π'], state=Form.chocolate_company)
async def handle_product_selection(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data["chocolate_vid"]=callback_query.data
        await Form.asd.set()
        await bot.send_message(callback_query.from_user.id, "–ë–ª–∞–≥–æ–¥–∞—Ä—é‚ù§Ô∏è –í–∑–≥–ª—è–Ω–∏—Ç–µ –Ω–∞ –º–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏üéÅ")
        file_name = product_photos_company['–®–æ–∫–æ–ª–∞–¥']
        photo_groups = list(split_list(file_name, 10))
        for group in photo_groups:
            media = types.MediaGroup()
            for photo_url in group:
                photo = open(photo_url, 'rb')
                media.attach_photo(photo) 
            await bot.send_media_group(callback_query.from_user.id, media=media)  
        await bot.send_message(callback_query.from_user.id,f"–•–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â–µ?",reply_markup=keyboard_4)
        row_number_person = find_last_row_with_id(wks_company, data["ID"])
        if row_number_person:
            wks_company.update_value((row_number_person, 11), data['chocolate_vid'])


#–£–ö–†–ê–®–ï–ù–ò–Ø –ö–û–ú–ü–ê–ù–ò–ò
@dp.callback_query_handler(lambda callback_query: callback_query.data in ['–£–∫—Ä–∞—à–µ–Ω–∏—è'], state=Form.inline1)
async def handle_product_selection(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        await bot.send_message(callback_query.from_user.id, f"–ë–ª–∞–≥–æ–¥–∞—Ä—é‚ù§Ô∏è –£–∫–∞–∂–∏—Ç–µ –≤–∏–¥ —É–∫—Ä–∞—à–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–π –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç‚Ä¶")
        await Form.jewelery_company.set()
    
@dp.message_handler(state=Form.jewelery_company)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['vid'] = message.text
        await Form.asd.set()
        await message.answer(f"–ë–ª–∞–≥–æ–¥–∞—Ä—é, {data['name']}‚ù§Ô∏è –í–∑–≥–ª—è–Ω–∏—Ç–µ –Ω–∞ –º–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        file_name = product_photos_company['–£–∫—Ä–∞—à–µ–Ω–∏—è']
        photo_groups = list(split_list(file_name, 10))
        for group in photo_groups:
            media = types.MediaGroup()
            for photo_url in group:
                photo = open(photo_url, 'rb')
                media.attach_photo(photo) 
            await bot.send_media_group(chat_id=message.chat.id, media=media)  
        await message.answer(f"–•–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â–µ?",reply_markup=keyboard_4) 
        row_number_person = find_last_row_with_id(wks_company, data["ID"])
        if row_number_person:
            wks_company.update_value((row_number_person, 10), data['vid'])


#–¶–í–ï–¢–´ –ö–û–ú–ü–ê–ù–ò–ò
@dp.callback_query_handler(lambda callback_query: callback_query.data in ['–¶–≤–µ—Ç—ã'], state=Form.inline1)
async def handle_product_selection(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        await Form.asd.set()
        await bot.send_message(callback_query.from_user.id, "–ë–ª–∞–≥–æ–¥–∞—Ä—é‚ù§Ô∏è –í–∑–≥–ª—è–Ω–∏—Ç–µ –Ω–∞ –º–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏üéÅ")
        file_name = product_photos_company['–¶–≤–µ—Ç—ã']
        photo_groups = list(split_list(file_name, 10))
        for group in photo_groups:
            media = types.MediaGroup()
            for photo_url in group:
                photo = open(photo_url, 'rb')
                media.attach_photo(photo) 
            await bot.send_media_group(callback_query.from_user.id, media=media)  
        await bot.send_message(callback_query.from_user.id,f"–•–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â–µ?",reply_markup=keyboard_4)

@dp.callback_query_handler(lambda callback_query: callback_query.data in ['zakaz'], state=Form.asd)
async def handle_product_selection(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        await bot.send_message(callback_query.from_user.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏‚Ä¶")
        await Form.zakaz1.set()

@dp.message_handler(state=Form.zakaz1)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['number_gift'] = message.text
        await message.answer(f"–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –≤—ã–±–æ—ÄüéÅ")
        await message.answer(f"–° –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ –∏ –æ–ø–ª–∞—Ç–µ. –î–æ –≤—Å—Ç—Ä–µ—á–∏‚ù§Ô∏è")
        row_number_person = find_last_row_with_id(wks_company, data["ID"])
        if row_number_person:
            wks_company.update_value((row_number_person, 12), data['number_gift'])
        print(data)
        await state.finish()
        await bot.send_message(CONSTANT_USER_ID, f"""
ID - {data['ID']}
–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {data['UserName']}
–°—Ç—Ä–∞–Ω–∞ - {data['country']}
–ò–º—è - {data['name']}
–ñ–∞–Ω—Ä - {data['genre']}
–ë—é–¥–∂–µ—Ç - {data['budget']}
–ê—Ä–æ–º–∞—Ç - {data['aromat']}
–†–∞–∑–º–µ—Ä - {data['size']}
–¶–≤–µ—Ç - {data['color']}
–í–∏–¥ - {data['vid']}
–ù–æ–º–µ—Ä –ø–æ–¥–∞—Ä–∫–∞ - {data['number_gift']}
""")

@dp.callback_query_handler(lambda callback_query: callback_query.data in ['eche'], state=Form.asd)
async def handle_product_selection(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        await bot.send_message(callback_query.from_user.id,f"–í—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç",reply_markup=keyboard)
        await Form.sam_podarok1.set()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)